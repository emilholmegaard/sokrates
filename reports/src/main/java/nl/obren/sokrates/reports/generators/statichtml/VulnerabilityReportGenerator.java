/*
 * Copyright (c) 2021 Željko Obrenović. All rights reserved.
 */

package nl.obren.sokrates.reports.generators.statichtml;

import nl.obren.sokrates.common.utils.FormattingUtils;
import nl.obren.sokrates.common.utils.ProcessingStopwatch;
import nl.obren.sokrates.reports.core.RichTextReport;
import nl.obren.sokrates.reports.utils.DataImageUtils;
import nl.obren.sokrates.reports.utils.DuplicationReportUtils;
import nl.obren.sokrates.reports.utils.GraphvizDependencyRenderer;
import nl.obren.sokrates.sourcecode.SourceFile;
import nl.obren.sokrates.sourcecode.analysis.results.CodeAnalysisResults;
import nl.obren.sokrates.sourcecode.analysis.results.DuplicationAnalysisResults;
import nl.obren.sokrates.sourcecode.aspects.LogicalDecomposition;
import nl.obren.sokrates.sourcecode.aspects.NamedSourceCodeAspect;
import nl.obren.sokrates.sourcecode.dependencies.ComponentDependency;
import nl.obren.sokrates.sourcecode.duplication.DuplicationDependenciesHelper;
import nl.obren.sokrates.sourcecode.duplication.DuplicationInstance;
import nl.obren.sokrates.sourcecode.metrics.DuplicationMetric;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityReportGenerator {
    public static final int MAX_TABLE_ROWS_COUNT = 100;
    private CodeAnalysisResults codeAnalysisResults;
    private File reportsFolder;
    private RichTextReport report;
    private int graphCounter = 1;
    
    public VulnerabilityReportGenerator(CodeAnalysisResults codeAnalysisResults, RichTextReport report, File reportsFolder) {
        this.codeAnalysisResults = codeAnalysisResults;
        this.report = report;
        this.reportsFolder = reportsFolder;
    }

    public void getDuplicatesTable(RichTextReport report, List<DuplicationInstance> duplicationInstances, String fragmentType) {
        report.startDiv("width: 100%; overflow-x: auto");
        report.startScrollingDiv();
        report.addHtmlContent("<table style='width: 80%'>\n");
        boolean saveCodeFragments = codeAnalysisResults.getCodeConfiguration().getAnalysis().isSaveCodeFragments();
        report.addHtmlContent("<th>Size</th><th>#</th><th>Folders</th><th>Files</th><th>Lines</th>" + (saveCodeFragments ? "<th>Code</th>" : ""));
        int count[] = {0};
        duplicationInstances.stream().limit(MAX_TABLE_ROWS_COUNT).forEach(instance -> {
            count[0]++;
            report.addHtmlContent("<tr>\n");

            SourceFile firstSourceFile = instance.getDuplicatedFileBlocks().get(0).getSourceFile();
            String extension = firstSourceFile.getExtension();

            report.addHtmlContent("<td>" + instance.getBlockSize() + "</td>");
            report.addHtmlContent("<td>x&nbsp;" + instance.getDuplicatedFileBlocks().size() + "</td>");
            String folderString = formatDisplayString(instance.getFoldersDisplayString());
            report.addHtmlContent("<td>" + folderString + "</td>");
            boolean cacheSourceFiles = codeAnalysisResults.getCodeConfiguration().getAnalysis().isSaveSourceFiles();
            report.addHtmlContent("<td>" +
                    "<div><div style='display: inline-block; vertical-align: top; margin-top: 3px; margin-right: 4px;'>" +
                    DataImageUtils.getLangDataImageDiv30(extension) +
                    "</div><div style='display: inline-block;'>"
                    + formatDisplayStringSimple(instance.getFilesDisplayString(cacheSourceFiles))
                    + "</div></div></td>");
            report.addHtmlContent("<td>" + formatDisplayString(instance.getLinesDisplayString()) + "</td>");
            if (saveCodeFragments) {
                String url = "../src/fragments/" + fragmentType + "/" + fragmentType + "_" + count[0] + "." + extension;
                report.addHtmlContent("<td><a target='_blank' href='" + url + "'>view</a></td>");
            }
            report.addHtmlContent("</tr>\n");
        });
        report.addHtmlContent("</table>\n");
        report.endDiv();
        report.endDiv();
    }

    private String formatDisplayStringSimple(String text) {
        return text.replace("\n", "</br>");
    }

    private String formatDisplayString(String text) {
        text = text.replace(" ", "&nbsp;");
        StringBuilder stringBuilder = new StringBuilder();
        for (String line : text.split("\n")) {
            stringBuilder
                    .append("<span title='" + line + "'>")
                    .append(StringUtils.abbreviateMiddle(line, "...", 50))
                    .append("</span>")
                    .append("\n");
        }
        return stringBuilder.toString().replace("\n", "</br>");
    }

    public void addDuplicationToReport(RichTextReport report) {
        this.report = report;
        addIntro(report);

        if (codeAnalysisResults.getCodeConfiguration().getAnalysis().isSkipDuplication()) {
            report.addParagraph("Duplication analysis has been skipped.");
            return;
        }

        ProcessingStopwatch.start("reporting/duplication/overall");
        addOverallDuplicationSection(report);
        ProcessingStopwatch.end("reporting/duplication/overall");
        ProcessingStopwatch.start("reporting/duplication/per extension");
        addDuplicationPerExtensionSection(report);
        ProcessingStopwatch.end("reporting/duplication/per extension");
        ProcessingStopwatch.start("reporting/duplication/per logical decomposition");
        addDuplicationPerLogicalDecomposition(report);
        ProcessingStopwatch.end("reporting/duplication/per logical decomposition");
        ProcessingStopwatch.start("reporting/duplication/longest duplicates");
        addLongestDuplicatesList(report);
        ProcessingStopwatch.end("reporting/duplication/longest duplicates");
        ProcessingStopwatch.start("reporting/duplication/duplicated units");
        addDuplicatedUnitsList(report);
        ProcessingStopwatch.end("reporting/duplication/duplicated units");
    }



    private void addOverallDuplicationSection(RichTextReport report) {
        DuplicationAnalysisResults duplicationAnalysisResults = codeAnalysisResults.getDuplicationAnalysisResults();

        report.startSection("Duplication Overall", "");
        report.startUnorderedList();
        report.addListItem("<b>" + FormattingUtils.getFormattedPercentage(duplicationAnalysisResults.getOverallDuplication().getDuplicationPercentage().doubleValue()) + "%</b> duplication:");
        report.startUnorderedList();
        report.addListItem("<b>" + FormattingUtils.formatCount(duplicationAnalysisResults.getOverallDuplication().getCleanedLinesOfCode()) + "</b> cleaned lines of cleaned code (without empty lines, comments, and frequently duplicated constructs such as imports)");
        report.addListItem("<b>" + FormattingUtils.formatCount(duplicationAnalysisResults.getOverallDuplication().getDuplicatedLinesOfCode()) + "</b> duplicated lines");
        report.endUnorderedList();
        report.addListItem("<a href='../data/text/duplicates.txt'><b>" + FormattingUtils.formatCount(duplicationAnalysisResults.getAllDuplicates().size()) + " duplicates</b></a>");
        report.endUnorderedList();
        DuplicationReportUtils.addOverallDuplication(report, duplicationAnalysisResults.getOverallDuplication());
        report.endSection();
    }

    private void addIntro(RichTextReport report) {
        int locDuplicationThreshold = codeAnalysisResults.getCodeConfiguration().getAnalysis().getMinDuplicationBlockLoc();
        report.addParagraph("Places in code with " + locDuplicationThreshold + " or more lines that " +
                "are exactly the same.", "margin-top: 12px; color: grey");
        report.startSection("Intro", "");
        report.startUnorderedList();
        report.addListItem("For duplication, we look at places in code where there are " + locDuplicationThreshold + " or more lines of code that are exactly the same.");
        report.addListItem("Before duplication is calculated, the code is cleaned to remove empty lines, comments, and frequently duplicated constructs such as imports.");
        report.addListItem("You should aim at having as little as possible (<5%) of duplicated code as high-level of duplication can lead to maintenance difficulties, poor factoring, and logical contradictions.");
        report.endUnorderedList();
        report.startShowMoreBlock("Learn more...");
        report.startUnorderedList();
        report.addListItem("To learn more about duplications and techniques for eliminating duplication, Sokrates recommends the following resources:");
        report.startUnorderedList();
        report.addListItem("<a target='_blank' href='https://martinfowler.com/ieeeSoftware/repetition.pdf'>Avoid Repetition</a>, MartinFlower.com (IEEE Software article)");
        report.addListItem("<a target='_blank' href='https://sourcemaking.com/refactoring/smells/duplicate-code'>Refactoring duplicated code</a>, sourcemaking.com");
        report.addListItem("<a target='_blank' href='https://martinfowler.com/bliki/BeckDesignRules.html'>Beck Design Rules</a>, MartinFowler.com");
        report.addListItem("<a target='_blank' href='https://en.wikipedia.org/wiki/Don%27t_repeat_yourself'>DRY (Don't Repeat Yourself) Principle</a>, Wikipedia");
        report.addListItem("<a target='_blank' href='https://sourcemaking.com/antipatterns/cut-and-paste-programming'>The Cut-and-Paste Programming Software Development Anti-Pattern</a>, sourcemaking.com");
        report.addListItem("<a target='_blank' href='https://blog.codinghorror.com/code-smells/'>Code Smells / Duplicated Code</a>, Jeff Atwood, codinghorror.com:");
        report.startUnorderedList();
        report.addListItem("<i>\"Duplicated code is the bane of software development. Stamp out duplication whenever possible. You should always be on the lookout for more subtle cases of near-duplication, too. Don't Repeat Yourself!\"</i>");
        report.endUnorderedList();
        report.addListItem("<a target='_blank' href='https://martinfowler.com/ieeeSoftware/coupling.pdf'>Reducing Coupling</a>, MartinFlower.com (IEEE Software article):");
        report.startUnorderedList();
        report.addListItem("<i>\"There are several ways to describe coupling, but it boils down to this: If changing one module in a program requires changing another module, then coupling exists.  ... Duplication always implies coupling, because changing one piece of duplicate code implies changing the other.\"</i>");

        report.endUnorderedList();

        report.endUnorderedList();
        report.endUnorderedList();
        report.endShowMoreBlock();

        report.endSection();
    }

    

}
