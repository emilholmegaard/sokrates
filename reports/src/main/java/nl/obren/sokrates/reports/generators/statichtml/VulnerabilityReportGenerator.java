/*
 * Copyright (c) 2023 Emil Holmegaard. All rights reserved.
 */

package nl.obren.sokrates.reports.generators.statichtml;

import nl.obren.sokrates.common.utils.FormattingUtils;
import nl.obren.sokrates.common.utils.ProcessingStopwatch;
import nl.obren.sokrates.reports.core.RichTextReport;
import nl.obren.sokrates.sourcecode.analysis.results.CodeAnalysisResults;
import nl.obren.sokrates.sourcecode.analysis.results.VulnerabilitiesAnalysisResults;
import nl.obren.sokrates.sourcecode.analysis.vulnerabilities.Dependency;

import java.util.List;

public class VulnerabilityReportGenerator {
        public static final int MAX_TABLE_ROWS_COUNT = 100;
        private CodeAnalysisResults codeAnalysisResults;
        private RichTextReport report;

        public static final String CRITICAL_COLOR = "#000";
        public static final String HIGH_COLOR = "#3B0000";
        public static final String MEDIUM_COLOR = "#c0c0c0";
        public static final String LOW_COLOR = "#c0c0c0";

        public static final String TOTAL_COLOR = "#c0c0c0";

        public VulnerabilityReportGenerator(CodeAnalysisResults codeAnalysisResults, RichTextReport report) {
                this.codeAnalysisResults = codeAnalysisResults;
                this.report = report;
        }

        public void addVulnerabilitiesToReport() {

                addIntro();

                if (codeAnalysisResults.getCodeConfiguration().getVulnerability().isSkipVulnerabilities()) {
                        this.report.addParagraph("Vulnerability analysis has been skipped.");
                        return;
                }

                ProcessingStopwatch.start("reporting/vulnerabilities/highlights");
                addHighlightVulnerabilitySection();
                ProcessingStopwatch.end("reporting/vulnerabilities/highlights");

                ProcessingStopwatch.start("reporting/vulnerabilities/overall");
                addOverallVulnerabilitySection();
                ProcessingStopwatch.end("reporting/vulnerabilities/overall");

        }

        private void addHighlightVulnerabilitySection() {
                VulnerabilitiesAnalysisResults vulnerabilityAnalysisResults = codeAnalysisResults
                                .getVulnerabilitiesAnalysisResults();

                this.report.startSection("Vulnerabilities Highlights", "The solutions has "
                                + vulnerabilityAnalysisResults.getTotalNumberOfThirdPartyDependencies()
                                + " dependencies");

                addInfoBlockWithColor(
                                FormattingUtils.getSmallTextForNumber(
                                                vulnerabilityAnalysisResults.getTotalCriticalVulnerabilities()),
                                "Critical vulnerabilities", CRITICAL_COLOR, false);
                addInfoBlockWithColor(
                                FormattingUtils.getSmallTextForNumber(
                                                vulnerabilityAnalysisResults.getTotalHighVulnerabilities()),
                                "High severity vulnerabilities", HIGH_COLOR, false);
                addInfoBlockWithColor(
                                FormattingUtils.getSmallTextForNumber(
                                                vulnerabilityAnalysisResults.getTotalMediumVulnerabilities()),
                                "Medium severity vulnerabilities", MEDIUM_COLOR, true);
                addInfoBlockWithColor(
                                FormattingUtils.getSmallTextForNumber(
                                                vulnerabilityAnalysisResults.getTotalLowVulnerabilities()),
                                "Low severity vulnerabilities", LOW_COLOR, true);
                addInfoBlockWithColor(
                                FormattingUtils
                                                .getSmallTextForNumber(vulnerabilityAnalysisResults
                                                                .getTotalNumberOfThirdPartyDependencies()),
                                "# dependencies in total", TOTAL_COLOR, true);
                addInfoBlockWithColor(
                                FormattingUtils.getSmallTextForNumber(
                                                vulnerabilityAnalysisResults.getTotalNumberOfCves()),
                                "# CVEs in total", TOTAL_COLOR, true);

                this.report.endSection();
        }

        private void addInfoBlockWithColor(String mainValue, String subtitle, String color, boolean shouldOverride) {
                String style = "border-radius: 12px;";

                style += "margin: 12px 12px 12px 0px;";
                style += "display: inline-block; width: 160px; height: 120px;";
                style += "background-color: " + color
                                + "; text-align: center; vertical-align: middle; margin-bottom: 36px;";

                this.report.startDiv(style);
                String specialColor = mainValue.equals("<b>0</b>") ? " color: grey;" : "";
                String defaultColor = "#FFFFFF";
                if (shouldOverride) {
                        defaultColor = "#000000";
                }

                this.report.addHtmlContent("<div style='font-size: 50px; margin-top: 20px; color: " + defaultColor + ";"
                                + specialColor + "'>" + mainValue + "</div>");

                this.report.addHtmlContent(
                                "<div style='color: grey; font-size: 15px;" + specialColor + "'>" + subtitle
                                                + "</div>");
                this.report.endDiv();
        }

        private void addOverallVulnerabilitySection() {
                VulnerabilitiesAnalysisResults vulnerabilityAnalysisResults = codeAnalysisResults
                                .getVulnerabilitiesAnalysisResults();
                if (vulnerabilityAnalysisResults.getRoot() != null) {
                        this.report.startSection("Vulnerabilities Overall", "");

                        // Project details
                        this.report.addLevel2Header(vulnerabilityAnalysisResults.getRoot().projectInfo.name);
                        this.report.addParagraph("Scan Information");
                        this.report.startUnorderedList();
                        this.report.addListItem("<i>Dependency check version</i>: "
                                        + vulnerabilityAnalysisResults.getRoot().scanInfo.engineVersion);
                        this.report.addListItem("<i>Report date</i>: "
                                        + vulnerabilityAnalysisResults.getRoot().projectInfo.reportDate.substring(0,
                                                        10));
                        this.report.addListItem(
                                        "<i>Scanned dependencies</i>: "
                                                        + vulnerabilityAnalysisResults
                                                                        .getTotalNumberOfThirdPartyDependencies());
                        this.report.addListItem(
                                        "<i>Scanned vulnerable dependencies</i>: "
                                                        + vulnerabilityAnalysisResults
                                                                        .getTotalVulnerableDependencies());

                        this.report.endUnorderedList();

                        this.report.addHtmlContent(getDependencyTable(vulnerabilityAnalysisResults));

                        this.report.endSection();
                }
        }

        private void addIntro() {
                this.report.addParagraph(
                                "The amount of vulnerabilities in the solution (found via OWASP dependency check).",
                                "margin-top: 12px; color: grey");
                this.report.startSection("Intro", "");
                this.report.startUnorderedList();
                this.report.addListItem(
                                "For vulnerabilities, we do not calculate and lookup vulnarabilities in sokrates, but we present results from OWASP dependency check.");
                this.report.addListItem(
                                "You should aim at having as few as possible vulnerabilities in your code base. Be aware that the dependency checks only scan your 3rd party libraries, and that you can mitigate multiple of the vulnerabilities in your code, but that it is a smell to have 3rd party tools whcih are vulnerable.");
                this.report.endUnorderedList();

                this.report.startShowMoreBlock("Learn more...");

                this.report.startUnorderedList();
                this.report.addListItem(
                                "To learn more about vulnerabilities and techniques for eliminating vulnerabilities, Sokrates recommends the following resources:");

                this.report.startUnorderedList();
                this.report.addListItem(
                                "<a target='_blank' href='https://martinfowler.com/articles/web-security-basics.html'>The Basics of Web Application Security</a>, MartinFlower.com (IEEE Software article)");
                this.report.addListItem(
                                "<a target='_blank' href='https://owasp.org/'>Who is the OWASPÂ® Foundation?</a>, owasp.org");

                this.report.endUnorderedList();
                this.report.endUnorderedList();

                this.report.endShowMoreBlock();

                this.report.endSection();
        }

        private String getDependencyTable(VulnerabilitiesAnalysisResults results) {
                StringBuilder table = new StringBuilder();

                table.append("<div style='width: 100%; overflow-x: scroll; overflow-y: scroll;'>\n");
                table.append("<table style='width: 80%'>\n");
                table.append("<tr>");
                String header = "<th>Dependency</th><th>VulnerabilityId</th><th>Package</th><th>Highest Severity</th><th>CVE Count</th><th>Evidence Count</th>";
                table.append(header + "\n");
                table.append("<tr>");

                String[] defaultValue = { "" };

                for (String dependency : results.getVulnerableDependencies()) {

                        String dependencyName = dependency;
                        String link, packageId, vulnerabilityId, highestSeverity, cVECount, evidenceCount;
                        link = packageId = vulnerabilityId = highestSeverity = cVECount = evidenceCount = "";

                        packageId = String.join(",",
                                        results.getVulnerableDependenciesToPackage().getOrDefault(dependency,
                                                        defaultValue));
                        link = results.getVulnerableDependenciesToPackageUrl().getOrDefault(dependency,
                                        defaultValue[0]);
                        vulnerabilityId = String.join(",", results.getVulnerableDependenciesToVulnerabilityId()
                                        .getOrDefault(dependency, defaultValue));
                        highestSeverity = results.getVulnerableDependenciesToHighestSeverity().getOrDefault(dependency,
                                        defaultValue[0]);
                        cVECount = results.getVulnerableDependenciesToCVECount().getOrDefault(dependency, 0) + "";
                        evidenceCount = results.getVulnerableDependenciesToEvidenceCount().getOrDefault(dependency, 0)
                                        + "";

                        //Only print dependency, if it has informations
                        if (!packageId.isEmpty() || !link.isEmpty() || !vulnerabilityId.isEmpty()
                                        || !highestSeverity.isEmpty() || cVECount != "0" || evidenceCount != "0") {
                                table.append("<tr>\n");
                                if (!link.isEmpty()) {
                                        dependencyName = "<a href='" + link + "' target='_blank'>" + dependencyName
                                                        + "</a>";
                                }

                                String dependencyInfo = "<td>" + dependencyName + "</td><td>" + vulnerabilityId
                                                + "</td><td>" + packageId + "</td><td>" + highestSeverity + "</td><td>"
                                                + cVECount + "</td><td>" + evidenceCount + "</td>";
                                table.append(dependencyInfo + "\n");

                                table.append("</tr>\n");
                        }
                }

                table.append("</table>\n");
                table.append("</div>\n");

                return table.toString();
        }

}
